{"version":3,"sources":["app/App.js","app/History.js","serviceWorker.js","index.js"],"names":["hist","newKey","parseInt","localStorage","getItem","isNaN","this","resetHistory","console","log","genKey","removeItem","setItem","obj","key","keyObj","id","Object","assign","JSON","stringify","modObj","parse","modObjArr","entries","clear","output","len","length","i","row","push","AddTask","props","onSubmit","type","name","autoComplete","value","Tasks","handleSubmit","bind","handleCheck","resetTiles","event","preventDefault","newTask","target","addObj","text","checked","forceUpdate","modifyObj","readHistory","reverse","map","tile","index","className","onChange","onClick","renderTiles","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPAIMA,G,MAAO,I,iGCDT,IAAMC,EAASC,SAASC,aAAaC,QAAQ,MAC7C,OAAGC,MAAMJ,IACPK,KAAKC,eACLC,QAAQC,IAAIR,GACZO,QAAQC,IAAI,aACLH,KAAKI,WAEdP,aAAaQ,WAAW,KACxBR,aAAaS,QAAQ,IAAMX,EAAO,GAC3BA,K,6BAGFY,GACL,IAAMC,EAAMR,KAAKI,SACXK,EAAS,CAACC,GAAGF,GACnBG,OAAOC,OAAOL,EAAKE,GACnBZ,aAAaS,QAAQE,EAAKK,KAAKC,UAAUP,M,gCAGjCC,EAAKO,GACb,IAAMR,EAAMM,KAAKG,MAAMnB,aAAaC,QAAQU,IACtCS,EAAYN,OAAOO,QAAQH,GACjCb,QAAQC,IAAIc,GACZV,EAAIU,EAAU,GAAG,IAAMA,EAAU,GAAG,GACpCpB,aAAaS,QAAQE,EAAKK,KAAKC,UAAUP,M,qCAIzCV,aAAasB,QACbtB,aAAaS,QAAQ,IAAK,K,oCAM1B,IAFA,IAAMc,EAAS,GACTC,EAAMxB,aAAayB,OAAQ,EACzBC,EAAI,EAAGA,EAAIF,EAAKE,IAAI,CAC1B,IAAMC,EAAMX,KAAKG,MAAMnB,aAAaC,QAAQyB,IAC5CH,EAAOK,KAAKD,GAEd,OAAOJ,M,ODpCX,SAASM,EAAQC,GACf,OACE,0BAAMC,SAAUD,EAAMC,UACpB,2BAAOC,KAAK,OAAOC,KAAK,UAAUC,aAAa,QADjD,IACyD,6BACvD,2BAAOF,KAAK,SAASG,MAAM,mB,IAM3BC,E,YACJ,WAAYN,GAAO,IAAD,8BAChB,4CAAMA,KACDO,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAJF,E,0EAOLG,GACXA,EAAMC,iBACN,IAAMC,EAAUF,EAAMG,OAAOD,QAAQR,MACrCtC,EAAKgD,OAAO,CAACC,KAAKH,EAASI,SAAQ,IACnC5C,KAAK6C,gB,kCAGKP,GACV,IAAM9B,EAAM8B,EAAMG,OAAO/B,GACzBhB,EAAKoD,UAAUtC,EAAI,CAACoC,QAAQN,EAAMG,OAAOG,UACzC5C,KAAK6C,gB,oCAGO,IAAD,OACX,OAAOnD,EAAKqD,cAAcC,UAAUC,IAAI,SAACC,EAAMC,GAAW,IAC9CzC,EAAqBwC,EAArBxC,GAAIiC,EAAiBO,EAAjBP,KAAMC,EAAWM,EAAXN,QAKZQ,EAAYR,EAAU,mBAAqB,OACjD,OACI,yBAAKQ,UAAWA,EAAW5C,IAAKE,GAChC,2BAAO0C,UAAU,QAAQvB,KAAK,WAAWe,QAASA,EAASlC,GAAIA,EAAI2C,SAAU,EAAKjB,cACjFO,O,mCAOTjD,EAAKO,eACLD,KAAK6C,gB,+BAIL,OACE,6BACE,yBAAKO,UAAU,cACb,kBAAC1B,EAAD,CAASE,SAAU5B,KAAKkC,eACxB,2BACEL,KAAK,SACLG,MAAM,kBACNsB,QAAStD,KAAKqC,cAGlB,yBAAKe,UAAU,eACZpD,KAAKuD,oB,GAvDIC,IAAMC,WAsEXC,MARf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,QErEcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.781bbfd8.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport History from './History'\n\nconst hist = new History()\n\nfunction AddTask(props){\n  return (\n    <form onSubmit={props.onSubmit}>\n      <input type=\"text\" name=\"newTask\" autoComplete=\"off\"/> <br/>\n      <input type=\"submit\" value=\"Dodaj zadanie\"/>\n    </form>\n  )\n}\n\n\nclass Tasks extends React.Component{\n  constructor(props){\n    super(props)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleCheck = this.handleCheck.bind(this)\n    this.resetTiles = this.resetTiles.bind(this)\n  }\n\n  handleSubmit(event){\n    event.preventDefault()\n    const newTask = event.target.newTask.value\n    hist.addObj({text:newTask, checked:false})\n    this.forceUpdate()\n  }\n\n  handleCheck(event){\n    const key = event.target.id\n    hist.modifyObj(key,{checked:event.target.checked})\n    this.forceUpdate()\n  }\n\n  renderTiles(){\n    return hist.readHistory().reverse().map((tile, index) => {\n        const { id, text, checked} = tile\n        /* cos w sttylu onchange={funkcja(id)} i w tej funkcji zmienianie\n        teraz ide spac, powodznenia, jutrzejszy Janie :)\n        obiektu w localStorage bedzie chyba mialo sens\n        */\n        const className = checked ? \"Tile TileChecked\" : \"Tile\"\n        return (\n            <div className={className} key={id}>\n            <input className=\"Check\" type=\"checkbox\" checked={checked} id={id} onChange={this.handleCheck}/>\n            {text}\n            </div>\n          )\n        })\n  }\n\n  resetTiles(){\n    hist.resetHistory()\n    this.forceUpdate()\n  }\n\n  render(){\n    return(\n      <div>\n        <div className=\"Split Left\">\n          <AddTask onSubmit={this.handleSubmit}/>\n          <input\n            type=\"button\"\n            value=\"resetuj kafelki\"\n            onClick={this.resetTiles}\n          />\n        </div>\n        <div className=\"Split Right\">\n          {this.renderTiles()}\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tasks/>\n    </div>\n  );\n}\n\nexport default App;\n","//skopiowane z bmi-calc\nexport default class History{\n  genKey(){\n    const newKey = parseInt(localStorage.getItem(\"i\"))\n    if(isNaN(newKey)){\n      this.resetHistory()\n      console.log(newKey)\n      console.log(\"co tu sie\")\n      return this.genKey()\n    }\n    localStorage.removeItem(\"i\")\n    localStorage.setItem(\"i\", (newKey+1))\n    return newKey\n  }\n\n  addObj(obj){\n    const key = this.genKey()\n    const keyObj = {id:key}\n    Object.assign(obj, keyObj)\n    localStorage.setItem(key, JSON.stringify(obj))\n  }\n\n  modifyObj(key, modObj){\n    const obj = JSON.parse(localStorage.getItem(key))\n    const modObjArr = Object.entries(modObj)\n    console.log(modObjArr)\n    obj[modObjArr[0][0]] = modObjArr[0][1]\n    localStorage.setItem(key, JSON.stringify(obj))\n  }\n\n  resetHistory(){\n    localStorage.clear()\n    localStorage.setItem(\"i\", 0);\n  }\n\n  readHistory(){\n    const output = []\n    const len = localStorage.length -1\n    for(let i = 0; i < len; i++){\n      const row = JSON.parse(localStorage.getItem(i))\n      output.push(row)\n    }\n    return output\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}